<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<!-- Speaker EX -->
	<!-- 
	<bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000">
		 <property name="speaker" ref="apple"></property>
		 <property name="price" value="2700000"></property>
	</bean>
	
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean>
	 -->
	<!-- //Speaker EX -->
	
	<!-- Collection EX -->
	<!-- 
	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
			</list>
		</property>
	</bean>
	 -->
	<!-- //Collection EX -->
	
	<context:component-scan base-package="com.springbook.biz"/>
	<bean id="log" class="com.springbook.biz.common.Log4jAdvice"/>
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"/>
	<bean id="after" class="com.springbook.biz.common.AfterAdvice"/>
	<bean id="around" class="com.springbook.biz.common.AroundAdvice"/>
	<!-- 
		1. 조인포인트: 클라이언트가 호출하는 모든 비즈니스 메소드.
		2. 포인트컷: 필터링된 조인포인트.
		3. 어드바이스: 횡단 관심에 해당하는 통 기능의 코드(독립된 클래스의 메소드로 작성).
		4. 위빙: 포인트컷으로 지정한 핵심 관심 메소드가 호출될 때, 어드바이스에 해당하는 황단 관심 메소드가 삽입되는 과정.
		5. 애스팩트: 포인트컷과 어드바이스의 결합으로서, 어떤 포인트컷 메소드에 대해서 어떤 어드바이스 메소드를 실행할지 결정.
	 -->
	<!--  
	<aop:config> 루트 엘리먼트. 스프링 설정 파일 내에 여러 번 사용할 수 있다.
	<aop:pointcut> 포인트컷을 지정하기 위해 사용. 유일한 아이디를 할당하여 애스팩트를 설정할 때 포인트컷을 참조하는 용도로 사용한다.
	<aop:aspect> 핵심 관심에 해당하는 포인트컷 메소드와 횡단 관심에 해당하는 어드바이스 메소드를 결합하기 위해 사용한다. 
	<aop:advisor> 포인트컷과 어드바이스를 결합한다는 점에서 애스팩트와 같은 기능을 한다(특수한 경우에 advisor을 사용한다).
	 -->
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>

		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog"/>
		</aop:aspect>
		<aop:aspect ref="after">
			<aop:after pointcut-ref="allPointcut" method="finallyLog"/>
		</aop:aspect>
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog"/>
		</aop:aspect>
	</aop:config>
</beans>
